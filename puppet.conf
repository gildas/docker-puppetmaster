[main]
    # Where Puppet stores dynamic and growing data.  The default for this setting is calculated specially, like `confdir`_.
    # The default value is '/var/lib/puppet'.
    # vardir = /var/lib/puppet
    vardir = /var/lib/puppet

    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl

    # Whether log files should always flush to disk.
    # autoflush = false
    autoflush = true

    # Whether plugins should be synced with the central server.
    # pluginsync = false
    pluginsync = true

    # The header containing an authenticated
    # client's SSL DN.  Only used with Mongrel.  This header must be set by the proxy
    # to the authenticated client's SSL DN (e.g., `/CN=puppet.puppetlabs.com`).
    # See http://projects.puppetlabs.com/projects/puppet/wiki/Using_Mongrel for more information.
    # The default value is 'HTTP_X_CLIENT_DN'.
    # ssl_client_header = HTTP_X_CLIENT_DN
    ssl_client_header = SSL_X_CLIENT_DN

    # The header containing the status
    # message of the client verification. Only used with Mongrel.  This header must be set by the proxy
    # to 'SUCCESS' if the client successfully authenticated, and anything else otherwise.
    # See http://projects.puppetlabs.com/projects/puppet/wiki/Using_Mongrel for more information.
    # The default value is 'HTTP_X_CLIENT_VERIFY'.
    # ssl_client_verify_header = HTTP_X_CLIENT_VERIFY
    ssl_client_verify_header = SSL_X_CLIENT_VERIFY

    # During an inspect run, whether to archive files whose contents are audited to a file bucket.
    # archive_files = false
    archive_files = true

[master]
    # The name to use when handling certificates.  Defaults
    # to the fully qualified domain name.
    # The default value is 'localhost.localdomain'.
    # certname = localhost.localdomain

    # The comma-separated list of alternative DNS names to use for the local host.
    # When the node generates a CSR for itself, these are added to the request
    # as the desired `subjectAltName` in the certificate: additional DNS labels
    # that the certificate is also valid answering as.
    # This is generally required if you use a non-hostname `certname`, or if you
    # want to use `puppet kick` or `puppet resource -H` and the primary certname
    # does not match the DNS name you use to communicate with the host.
    # This is unnecessary for agents, unless you intend to use them as a server for
    # `puppet kick` or remote `puppet resource` management.
    # It is rarely necessary for servers; it is usually helpful only if you need to
    # have a pool of multiple load balanced masters, or for the same master to
    # respond on two physically separate networks under different names.
    dns_alt_names = puppet.apac.inin.com,puppet.lab.apac.inin.com,puppet.demo.apac.inin.com,puppet.emea.inin.com

    # The name to use the Certificate Authority certificate.
    # The default value is 'Puppet CA: $certname'.
    # ca_name = Puppet CA: localhost.localdomain

    # Whether to allow a new certificate
    # request to overwrite an existing certificate.
    # allow_duplicate_certs = false
    allow_duplicate_certs = true

    # Using Directory based dynamic environments
    environmentpath = $confdir/environments

    # Hiera is our node classifier
    hiera_config = /etc/hiera.yaml

    # Where to find information about nodes.
    # The default value is 'plain'.
    # node_terminus = plain
    # Dashboard will be our External Nodes Classifier
    node_terminus  = exec
    external_nodes = /usr/bin/env PUPPET_DASHBOARD_URL=http://localhost:3000 /usr/share/puppet-dashboard/bin/external_node

    # Whether to store each client's configuration, including catalogs, facts,
    # and related data.  This also enables the import and export of resources in
    # the Puppet language - a mechanism for exchange resources between nodes.
    # By default this uses ActiveRecord and an SQL database to store and query
    # the data; this, in turn, will depend on Rails being available.
    # You can adjust the backend using the storeconfigs_backend setting.
    # storeconfigs = false
    #storeconfigs = true

    # Configure the backend terminus used for StoreConfigs.
    # By default, this uses the ActiveRecord store, which directly talks to the
    # database from within the Puppet Master process.
    # The default value is 'active_record'.
    # storeconfigs_backend = active_record
    #storeconfigs_backend = puppetdb

    #reports = store,tagmail,http,puppetdb
    reports = store, http

    # The URL used by the http reports processor to send reports
    # The default value is 'http://localhost:3000/reports/upload'.
    reporturl = http://localhost:3000/reports/upload

    # The 'from' email address for the reports.
    # The default value is 'report@localhost.localdomain'.
    # reportfrom = report@localhost.localdomain
    reportfrom = puppet-inin@gmail.com

    # The server to send transaction reports to.
    # The default value is '$server'.
    # report_server = puppet

    # The port to communicate with the report_server.
    # The default value is '$masterport'.
    # report_port = 8140

[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuratiion.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is '$confdir/classes.txt'.
    classfile = $vardir/classes.txt

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$confdir/localconfig'.
    localconfig = $vardir/localconfig

    # Whether to send reports after every transaction.
    # The default value is 'true'.
    report = true

    # Whether to create dot graph files for the different
    # configuration graphs.  These dot files can be interpreted by tools
    # like OmniGraffle or dot (which is part of ImageMagick).
    graph = true

    # Whether plugins should be synced with the central server.
    # The agent running on the server does not need the sync
    pluginsync = false

    # How often puppet agent applies the client configuration; in seconds.
    # Note that a runinterval of 0 means "run continuously" rather than
    # "never run." If you want puppet agent to never run, you should start
    # it with the `--no-client` option.
    # The default value is '1800'.
    runinterval = 600
